 Fully Featured Banking System

A robust, console-based banking system built in Java that supports user registration, login, account management, transactions, and JSON-based data persistence. Designed with modular architecture and unit testing in mind, this project is a foundation for future database and GUI upgrades using JavaFX.

---

 Features

-  Secure user registration and login
-  Create savings or checking accounts
-  Deposit and withdraw funds
-  View account balances and account history
-  Session-based user handling
-  JSON-based data storage (no database required)
-  JUnit 5 test coverage for service layer
- ️ Test mode for isolated testing (no data saving)

---

 How to Run

1. **Clone the repository**
   ```bash
   git clone https://github.com/NatePombi/java-projects.git
   cd java-projects/FullyFeaturedBankingSystem

2. Open the project in your IDE
   Use IntelliJ IDEA, Eclipse, or another Java IDE.
   Make sure the project SDK is set to Java 17 or higher.

3. Download dependencies
   Ensure you have the Gson library added to your project.
   If you're using Maven, add the dependency in your pom.xml:
   <dependency>
     <groupId>com.google.code.gson</groupId>
     <artifactId>gson</artifactId>
     <version>2.10.1</version>
   </dependency>

4. Compile the project (if not using IDE build)
    Download gson-2.10.1.jar into a lib folder inside your project root.

    Use this compile command :
javac -cp "lib/gson-2.10.1.jar" -d out \
    src/app/*.java \
    src/model/*.java \
    src/service/*.java \
    src/repository/*.java \
    src/exception/*.java \
    src/ui/*.java \
    src/util/*.java \
    src/test/service/*.java

5. Run the app
    java -cp "out;lib/gson-2.10.1.jar" Main
---

Step-by-Step Guide: Using the Banking App
This guide walks you through how to use the app and what to expect if something goes wrong.

 1. Register a New User
Enter: Username, password, and full name

Errors:
- Username already exists
- Empty fields

 2. Log In
Enter: Existing credentials

Errors:
Incorrect username or password
User not found

 3. Open a Bank Account
Choose: Savings, Checking or business

Errors:

Invalid account type

 4. View Balance
Enter: Account number

Errors:
Unauthorized access
Account not found

 5. Deposit Money
Enter: Account number & amount

Errors:
Invalid amount
Account not found
Unauthorized Access

 6. Withdraw Money
Enter: Account number & amount

Errors:
Insufficient funds
Account not found
Invalid amount
Unauthorized Access

 7. Transfer Funds
 Enter account number you transferring from
 Enter account number you transferring to
 Enter amount you transferring

Errors:
Account not found
Invalid Transfer amount from
Invalid amount
Unauthorized Access


 8. View Transaction History
Enter: Account number

Errors:
Account not found
Unauthorized Access

 9. View Account Details
Enter: Account number

Errors:
Account not found
Unauthorized Access

 10. Delete Account
 Enter: Account number

 Errors:
 Account not found
 Unauthorized Access
 Deleting with Funds

🔁 11. Log Out
Logs out the current user and returns to the main menu.


---

  Technologies Used
- Java 17+
- Gson (for JSON)
- JUnit 5 (for testing)

--

Project Structure
src/
├── app/
├── exception/
├── model/
├── repository/
├── service/
├── test/
├── ui/
└── util/

--

 Future Plans
     Upgrade to JavaFX GUI (JavaFX 21+)
     Password encryption & password reset flow
     Switch to database (e.g., H2 or MySQL)
     RESTful API layer (long-term goal)

--

Author
Nathan Pombi
📧 pombinathan@gmail.com
🔗 https://www.linkedin.com/in/nathanpombi/
🔗 https://github.com/NatePombi/java-projects